Index: app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import Flask, render_template, request, redirect, url_for, session, flash, send_file\r\nfrom models.database_manager import DatabaseManager, create_database\r\nfrom models.user_manager import UserManager\r\nfrom models.portfolio_manager import PortfolioManager\r\nfrom io import BytesIO\r\nimport pandas as pd\r\nimport datetime\r\napp = Flask(__name__)\r\napp.secret_key = 'your_secret_key_here'\r\n\r\n# Initialise database and managers\r\ncreate_database()\r\ndb_manager = DatabaseManager()\r\nuser_manager = UserManager(db_manager)\r\nportfolio_manager = PortfolioManager(db_manager)\r\n\r\n@app.route('/')\r\ndef home():\r\n    return render_template('index.html')\r\n\r\n@app.route('/register', methods=['GET', 'POST'])\r\ndef register():\r\n    if request.method == 'POST':\r\n        username = request.form['username']\r\n        password = request.form['password']\r\n        risk_tolerance = request.form['risk_tolerance']\r\n\r\n        if user_manager.register_user(username, password, risk_tolerance):\r\n            flash('✅ Registration successful! Please log in.')\r\n            return redirect(url_for('login'))\r\n        else:\r\n            flash('❌ Username already exists.')\r\n\r\n    return render_template('register.html')\r\n\r\n@app.route('/login', methods=['GET', 'POST'])\r\ndef login():\r\n    if request.method == 'POST':\r\n        username = request.form['username']\r\n        password = request.form['password']\r\n        user_id = user_manager.login_user(username, password)\r\n\r\n        if user_id:\r\n            session['user_id'] = user_id\r\n            session['username'] = username\r\n            flash(f'\uD83D\uDE0A Welcome back, {username}!')\r\n            return redirect(url_for('dashboard'))\r\n        else:\r\n            flash('❌ Invalid username or password.')\r\n\r\n    return render_template('login.html')\r\n\r\n@app.route('/logout')\r\ndef logout():\r\n    session.clear()\r\n    flash('\uD83D\uDC4B You have been logged out.')\r\n    return redirect(url_for('home'))\r\n\r\n@app.route('/dashboard')\r\ndef dashboard():\r\n    if 'user_id' not in session:\r\n        flash('⚠\uFE0F Please log in to continue.')\r\n        return redirect(url_for('login'))\r\n\r\n    return render_template('dashboard.html', username=session['username'])\r\n\r\n@app.route('/create-portfolio', methods=['GET', 'POST'])\r\ndef create_portfolio():\r\n    if 'user_id' not in session:\r\n        flash(\"⚠\uFE0F Please log in to create a portfolio.\")\r\n        return redirect(url_for('login'))\r\n\r\n    if request.method == 'POST':\r\n        name = request.form['name']\r\n        portfolio_manager.create_portfolio(session['user_id'], name)\r\n        flash(f\"✅ Portfolio '{name}' created successfully!\")\r\n        return redirect(url_for('dashboard'))\r\n\r\n    return render_template('create_portfolio.html')\r\n\r\n@app.route('/view-portfolios')\r\ndef view_portfolios():\r\n    if 'user_id' not in session:\r\n        flash(\"⚠\uFE0F Please log in to view your portfolios.\")\r\n        return redirect(url_for('login'))\r\n\r\n    portfolios = portfolio_manager.get_user_portfolios(session['user_id'])\r\n    return render_template('view_portfolios.html', portfolios=portfolios)\r\n\r\n@app.route('/portfolio/<int:portfolio_id>/add-symbol', methods=['GET', 'POST'])\r\ndef add_symbol(portfolio_id):\r\n    if 'user_id' not in session:\r\n        flash(\"⚠\uFE0F Please log in to add symbols.\")\r\n        return redirect(url_for('login'))\r\n\r\n    rows = db_manager.execute_query(\r\n        \"SELECT portfolio_id, user_id, name FROM portfolios WHERE portfolio_id = ? AND user_id = ?\",\r\n        (portfolio_id, session['user_id'])\r\n    )\r\n\r\n    if not rows:\r\n        flash(\"❌ Portfolio not found or does not belong to you.\")\r\n        return redirect(url_for('view_portfolios'))\r\n\r\n    portfolio = {\r\n        'portfolio_id': rows[0][0],\r\n        'user_id': rows[0][1],\r\n        'name': rows[0][2]\r\n    }\r\n\r\n    if request.method == 'POST':\r\n        ticker = request.form['ticker'].upper().strip()\r\n        data = portfolio_manager.yf.fetch_data(ticker)\r\n\r\n        if \"error\" in data:\r\n            flash(data[\"error\"])\r\n        else:\r\n            sector = data.get(\"sector\", \"Unknown\")\r\n            result = portfolio_manager.add_symbol(portfolio_id, ticker, sector)\r\n            if result:\r\n                flash(f\"✅ Symbol '{ticker}' added to portfolio!\")\r\n                return redirect(url_for('portfolio_detail', portfolio_id=portfolio_id))\r\n            else:\r\n                flash(f\"⚠\uFE0F Symbol '{ticker}' already exists in this portfolio.\")\r\n\r\n    return render_template('add_symbol.html', portfolio=portfolio)\r\n\r\n@app.route('/portfolio/<int:portfolio_id>')\r\ndef portfolio_detail(portfolio_id):\r\n    if 'user_id' not in session:\r\n        flash(\"⚠\uFE0F Please log in to view a portfolio.\")\r\n        return redirect(url_for('login'))\r\n\r\n    rows = db_manager.execute_query(\r\n        \"SELECT portfolio_id, user_id, name FROM portfolios WHERE portfolio_id = ? AND user_id = ?\",\r\n        (portfolio_id, session['user_id'])\r\n    )\r\n\r\n    if not rows:\r\n        flash(\"❌ Portfolio not found or does not belong to you.\")\r\n        return redirect(url_for('view_portfolios'))\r\n\r\n    portfolio = {\r\n        'portfolio_id': rows[0][0],\r\n        'user_id': rows[0][1],\r\n        'name': rows[0][2]\r\n    }\r\n\r\n    symbols = portfolio_manager.get_portfolio_symbols(portfolio_id)\r\n\r\n    total_market_value = 0\r\n    total_cost_all = 0\r\n\r\n    for s in symbols:\r\n        total_shares = 0\r\n        total_cost = 0\r\n        transactions = s.transactions if hasattr(s, 'transactions') and s.transactions else []\r\n\r\n        for txn in transactions:\r\n            try:\r\n                shares = float(txn.shares)\r\n                price = float(txn.price)\r\n                if txn.transaction_type == 'Buy':\r\n                    total_shares += shares\r\n                    total_cost += shares * price\r\n                elif txn.transaction_type == 'Sell':\r\n                    total_shares -= shares\r\n            except ValueError:\r\n                flash(f\"❌ Invalid transaction: shares='{txn.shares}', price='{txn.price}' for symbol {s.ticker}\")\r\n                continue\r\n\r\n        last_price = s.current_data.get('last_price', 0) if s.current_data else 0\r\n        s.current_shares = total_shares\r\n        s.current_value = round(total_shares * last_price, 2) if total_shares > 0 else 0\r\n\r\n        total_market_value += s.current_value\r\n        total_cost_all += total_cost\r\n\r\n    portfolio_summary = {\r\n        'market_value': round(total_market_value, 2),\r\n        'total_cost': round(total_cost_all, 2),\r\n        'pnl': round(total_market_value - total_cost_all, 2)\r\n    }\r\n\r\n    return render_template('portfolio_detail.html', portfolio=portfolio, symbols=symbols, portfolio_summary=portfolio_summary)\r\n\r\n@app.route('/portfolio/<int:portfolio_id>/symbol/<int:symbol_id>/add-transaction', methods=['GET', 'POST'])\r\ndef add_transaction(portfolio_id, symbol_id):\r\n    if 'user_id' not in session:\r\n        flash(\"⚠\uFE0F Please log in to add transactions.\")\r\n        return redirect(url_for('login'))\r\n\r\n    symbol = portfolio_manager.get_symbol_by_id(symbol_id)\r\n\r\n    if not symbol or symbol.portfolio_id != portfolio_id:\r\n        flash(\"❌ Symbol not found or does not belong to this portfolio.\")\r\n        return redirect(url_for('portfolio_detail', portfolio_id=portfolio_id))\r\n\r\n    if request.method == 'POST':\r\n        txn_type = request.form['transaction_type']\r\n        txn_date = request.form['transaction_date']\r\n        shares = float(request.form['shares'])\r\n        price_str = request.form['price'].strip()\r\n        price = float(price_str) if price_str else symbol.current_data['last_price']\r\n        cost = float(request.form['transaction_cost'])\r\n\r\n        # Date cannot be a future date\r\n        try:\r\n            txn_date_obj = datetime.datetime.strptime(txn_date, '%Y-%m-%d').date()\r\n            if txn_date_obj > datetime.date.today():\r\n                flash(\"❌ Transaction date cannot be in the future.\")\r\n                return redirect(url_for('add_transaction', portfolio_id=portfolio_id, symbol_id=symbol_id))\r\n        except ValueError:\r\n            flash(\"❌ Invalid date format. Please use YYYY-MM-DD.\")\r\n            return redirect(url_for('add_transaction', portfolio_id=portfolio_id, symbol_id=symbol_id))\r\n\r\n        # Prevent selling more shares than currently owned\r\n        total_bought = sum(txn.shares for txn in symbol.transactions if txn.transaction_type.lower() == 'buy')\r\n        total_sold = sum(txn.shares for txn in symbol.transactions if txn.transaction_type.lower() == 'sell')\r\n        current_shares = total_bought - total_sold\r\n\r\n        if txn_type.lower() == 'sell' and shares > current_shares:\r\n            flash(f\"❌ Cannot sell {shares} shares. You only own {current_shares} shares.\")\r\n            return redirect(url_for('add_transaction', portfolio_id=portfolio_id, symbol_id=symbol_id))\r\n\r\n        # Proceed to save transaction\r\n        portfolio_manager.add_transaction(symbol_id, txn_type, shares, price, cost, txn_date)\r\n        flash(f\"{txn_type} transaction for {shares} shares of {symbol.ticker} added!\")\r\n        return redirect(url_for('portfolio_detail', portfolio_id=portfolio_id))\r\n\r\n    return render_template('add_transaction.html', symbol=symbol, portfolio_id=portfolio_id)\r\n\r\n@app.route('/portfolio/<int:portfolio_id>/sector-exposure')\r\ndef sector_exposure(portfolio_id):\r\n    if 'user_id' not in session:\r\n        flash(\"⚠\uFE0F Please log in to view sector exposure.\")\r\n        return redirect(url_for('login'))\r\n\r\n    rows = db_manager.execute_query(\r\n        \"SELECT portfolio_id FROM portfolios WHERE portfolio_id = ? AND user_id = ?\",\r\n        (portfolio_id, session['user_id'])\r\n    )\r\n\r\n    if not rows:\r\n        flash(\"❌ Portfolio not found or does not belong to you.\")\r\n        return redirect(url_for('view_portfolios'))\r\n\r\n    portfolio = {\r\n        'portfolio_id': portfolio_id,\r\n        'name': rows[0][0]\r\n    }\r\n\r\n    exposure = portfolio_manager.calculate_sector_exposure(portfolio_id)\r\n    return render_template('sector_exposure.html', portfolio=portfolio, portfolio_id=portfolio_id, sector_exposure=exposure)\r\n\r\n\r\n@app.route('/portfolio/<int:portfolio_id>/export')\r\ndef export_portfolio_excel(portfolio_id):\r\n    symbols = portfolio_manager.get_portfolio_symbols(portfolio_id)\r\n\r\n    data = []\r\n    for s in symbols:\r\n        metrics = portfolio_manager.calculate_symbol_metrics(s)\r\n        data.append({\r\n            \"Ticker\": metrics[\"ticker\"],\r\n            \"Sector\": metrics[\"sector\"],\r\n            \"Current Price\": metrics[\"current_price\"],\r\n            \"Avg Cost\": metrics[\"avg_cost\"],\r\n            \"Shares\": metrics[\"current_shares\"],\r\n            \"Investment\": metrics[\"total_investment\"],\r\n            \"Current Value\": metrics[\"current_value\"],\r\n            \"Unrealised P/L\": metrics[\"unrealised_pl\"],\r\n            \"Unrealised P/L %\": metrics[\"unrealised_pl_percent\"],\r\n            \"Day Change\": metrics[\"day_change\"],\r\n            \"Day Change %\": metrics[\"day_change_percent\"]\r\n        })\r\n\r\n    df = pd.DataFrame(data)\r\n    output = BytesIO()\r\n    with pd.ExcelWriter(output, engine='openpyxl') as writer:\r\n        df.to_excel(writer, index=False, sheet_name='Portfolio')\r\n\r\n    output.seek(0)\r\n    return send_file(\r\n        output,\r\n        as_attachment=True,\r\n        download_name=f'portfolio_{portfolio_id}.xlsx',\r\n        mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\r\n    )\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app.py b/app.py
--- a/app.py	(revision 1690122b1caa80b3be2200bc35fd21a87a68c58f)
+++ b/app.py	(date 1743496400124)
@@ -1,10 +1,11 @@
-from flask import Flask, render_template, request, redirect, url_for, session, flash, send_file
+from flask import Flask, render_template, request, redirect, url_for, session, flash, send_file, jsonify
 from models.database_manager import DatabaseManager, create_database
 from models.user_manager import UserManager
 from models.portfolio_manager import PortfolioManager
 from io import BytesIO
 import pandas as pd
 import datetime
+import yfinance as yf
 app = Flask(__name__)
 app.secret_key = 'your_secret_key_here'
 
@@ -230,6 +231,182 @@
 
     return render_template('add_transaction.html', symbol=symbol, portfolio_id=portfolio_id)
 
+# LISA
+@app.route('/api/portfolio/<int:portfolio_id>/performance-data')
+def get_portfolio_performance_data(portfolio_id):
+    if 'user_id' not in session:
+        return jsonify({"error": "Not logged in"}), 401
+
+    # Validate user access to this portfolio
+    rows = db_manager.execute_query(
+        "SELECT portfolio_id FROM portfolios WHERE portfolio_id = ? AND user_id = ?",
+        (portfolio_id, session['user_id'])
+    )
+
+    if not rows:
+        return jsonify({"error": "Portfolio not found or access denied"}), 404
+
+    # Get time period from request
+    period = request.args.get('period', '1m')  # Default to 1 month
+
+    # Map period to yfinance period parameter
+    period_mapping = {
+        '1d': '1d',
+        '1w': '5d',
+        '1m': '1mo',
+        'ytd': 'ytd',
+        '1y': '1y',
+        'max': 'max'
+    }
+
+    yf_period = period_mapping.get(period, '1mo')
+
+    # Get portfolio composition
+    symbols = portfolio_manager.get_portfolio_symbols(portfolio_id)
+
+    if not symbols:
+        return jsonify({"error": "No symbols in portfolio"}), 400
+
+    # Calculate portfolio performance based on historical data
+    performance_data = calculate_portfolio_performance(symbols, yf_period)
+
+    return jsonify(performance_data)
+
+# LISA
+def calculate_portfolio_performance(symbols, period):
+    """Calculate historical portfolio performance based on symbols and transactions."""
+
+    # Start with empty performance dataframe
+    portfolio_df = pd.DataFrame()
+
+    print(f"Calculating performance for {len(symbols)} symbols with period {period}")
+
+    # Track position values over time for each symbol
+    for symbol in symbols:
+        # Skip if no transactions
+        if not hasattr(symbol, 'transactions') or not symbol.transactions:
+            print(f"Skipping {symbol.ticker}: No transactions")
+            continue
+
+        # Get historical data
+        ticker_data = yf.Ticker(symbol.ticker)
+        hist = ticker_data.history(period=period)
+
+        if hist.empty:
+            print(f"Skipping {symbol.ticker}: No historical data")
+            continue
+
+        print(f"Got historical data for {symbol.ticker}: {len(hist)} rows")
+
+        # Calculate shares owned at each date based on transactions
+        position_df = hist[['Close']].copy()
+        position_df.columns = ['price']
+        position_df['shares'] = 0
+
+        # Sort transactions by date
+        transactions = sorted(symbol.transactions, key=lambda x: x.transaction_date)
+
+        print(f"Transactions for {symbol.ticker}: {[t.transaction_date for t in transactions]}")
+        print(f"Historical data range: {position_df.index[0]} to {position_df.index[-1]}")
+
+        # Make a copy of position_df index for transaction mapping
+        position_dates = position_df.index.copy()
+
+        # Handle timezone differences by converting to datetime dates
+        position_dates_naive = [pd.Timestamp(dt.date()) for dt in position_dates]
+        latest_hist_date = position_dates_naive[-1]
+
+        # Apply transactions
+        current_shares = 0
+        for txn in transactions:
+            # Convert transaction date to datetime
+            txn_date = pd.to_datetime(txn.transaction_date)
+            txn_date_naive = pd.Timestamp(txn_date.date())
+
+            shares_change = float(txn.shares) if txn.transaction_type.lower() == 'buy' else -float(txn.shares)
+
+            # Update current shares
+            current_shares += shares_change
+
+            # If transaction date is in the historical data range, apply it directly
+            if txn_date_naive <= latest_hist_date:
+                # Find first date in our index that's >= transaction date
+                matching_dates = [i for i, d in enumerate(position_dates_naive) if d >= txn_date_naive]
+                if matching_dates:
+                    start_idx = matching_dates[0]
+                    # Apply to all dates after this transaction
+                    for i in range(start_idx, len(position_dates)):
+                        position_df.iloc[i, position_df.columns.get_loc('shares')] += shares_change
+                    print(f"Applied transaction from {txn_date.date()}: {shares_change} shares")
+                else:
+                    print(f"Transaction date {txn_date.date()} not found in historical data range")
+            else:
+                print(f"Transaction date {txn_date.date()} is after the last historical date.")
+
+        # Calculate position value
+        position_df['value'] = position_df['price'] * position_df['shares']
+
+        # Add to portfolio
+        if portfolio_df.empty:
+            portfolio_df = position_df[['value']].copy()
+            portfolio_df.columns = ['total_value']
+        else:
+            # Align dates and add
+            portfolio_df = portfolio_df.join(position_df[['value']], how='outer')
+            portfolio_df['value'] = portfolio_df['value'].fillna(0)
+            portfolio_df['total_value'] = portfolio_df['total_value'].add(portfolio_df['value'], fill_value=0)
+            portfolio_df = portfolio_df.drop('value', axis=1)
+
+    # Handle empty portfolio case
+    if portfolio_df.empty:
+        print("No portfolio data calculated")
+        return {
+            "dates": [],
+            "values": [],
+            "percentage_values": []
+        }
+
+    # Fill any NaN values with forward fill then backward fill
+    portfolio_df = portfolio_df.fillna(method='ffill').fillna(method='bfill')
+
+    # Summary for debugging
+    print(
+        f"Portfolio data calculated: {len(portfolio_df)} points, value range: {portfolio_df['total_value'].min()} to {portfolio_df['total_value'].max()}")
+
+    # Check if we have any valid data
+    if portfolio_df.empty or portfolio_df['total_value'].max() <= 0:
+        print("No valid portfolio value data found")
+        return {
+            "dates": [],
+            "values": [],
+            "percentage_values": []
+        }
+
+    # Convert to percentage change
+    absolute_values = portfolio_df['total_value'].tolist()
+    dates = [d.strftime('%Y-%m-%d') for d in portfolio_df.index.tz_localize(None).to_list()]
+
+    # Calculate percentage change
+    start_value = portfolio_df['total_value'].iloc[0]
+    if start_value > 0:
+        portfolio_df['percent_change'] = ((portfolio_df['total_value'] / start_value) - 1) * 100
+        percentage_values = portfolio_df['percent_change'].tolist()
+    else:
+        percentage_values = [0] * len(absolute_values)
+
+    # Ensure data types are serializable
+    absolute_values = [float(v) for v in absolute_values]
+    percentage_values = [float(v) for v in percentage_values]
+
+    print(f"Final data: {len(dates)} dates, {len(absolute_values)} values")
+    print(f"Sample data - Dates: {dates[:3]}, Values: {absolute_values[:3]}")
+
+    return {
+        "dates": dates,
+        "values": absolute_values,
+        "percentage_values": percentage_values
+    }
+
 @app.route('/portfolio/<int:portfolio_id>/sector-exposure')
 def sector_exposure(portfolio_id):
     if 'user_id' not in session:
@@ -289,4 +466,4 @@
     )
 
 if __name__ == '__main__':
-    app.run(debug=True)
+    app.run(debug=True)
\ No newline at end of file
Index: templates/portfolio_detail.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends 'layout.html' %}\r\n\r\n{% block title %}{{ portfolio.name }} - Portfolio Details{% endblock %}\r\n\r\n\r\n{% block content %}\r\n\r\n<h2 class=\"mb-3\">\uD83D\uDCC8 {{ portfolio.name }}</h2>\r\n<p class=\"text-muted\">Portfolio ID: {{ portfolio.portfolio_id }}</p>\r\n\r\n<a href=\"{{ url_for('add_symbol', portfolio_id=portfolio.portfolio_id) }}\" class=\"btn btn-success mb-4\">➕ Add Symbol</a>\r\n<a href=\"{{ url_for('export_portfolio_excel', portfolio_id=portfolio.portfolio_id) }}\" class=\"btn btn-outline-secondary mb-4 ms-2\">\r\n  \uD83D\uDCE5 Export to Excel\r\n</a>\r\n<a href=\"{{ url_for('sector_exposure', portfolio_id=portfolio.portfolio_id) }}\" class=\"btn btn-info mb-4 ms-2\">\r\n  \uD83E\uDDED View Sector Exposure\r\n</a>\r\n\r\n{% if symbols %}\r\n<table class=\"table table-striped\">\r\n    <thead class=\"table-dark\">\r\n        <tr>\r\n            <th>Ticker</th>\r\n            <th>Sector</th>\r\n            <th>Current Price</th>\r\n            <th>Shares</th>\r\n            <th>Current Value</th>\r\n            <th>Actions</th>\r\n            <th></th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        {% for s in symbols %}\r\n        <tr>\r\n            <td>{{ s.ticker }}</td>\r\n            <td>{{ s.sector }}</td>\r\n            <td>${{ s.current_data.last_price }}</td>\r\n            <td>{{ s.current_shares }}</td>\r\n            <td>${{ s.current_value }}</td>\r\n            <td>\r\n                <a href=\"{{ url_for('add_transaction', portfolio_id=portfolio.portfolio_id, symbol_id=s.symbol_id) }}\" class=\"btn btn-sm btn-outline-primary\">Add Txn</a>\r\n            </td>\r\n            <td class=\"text-center\">\r\n                {% if s.transactions %}\r\n                <span class=\"toggle-transactions\" data-target=\"transactions-{{ s.symbol_id }}\" style=\"cursor: pointer;\">\r\n                    <span class=\"toggle-icon\">&#9660;</span>\r\n                </span>\r\n                {% endif %}\r\n            </td>\r\n        </tr>\r\n        {% if s.transactions %}\r\n        <tr id=\"transactions-{{ s.symbol_id }}\" class=\"transaction-details\" style=\"display: none;\">\r\n            <td colspan=\"7\">\r\n                <table class=\"table table-bordered mt-2 mb-0\">\r\n                    <thead class=\"table-light\">\r\n                        <tr>\r\n                            <th>Date</th>\r\n                            <th>Type</th>\r\n                            <th>Shares</th>\r\n                            <th>Price</th>\r\n                            <th>Cost</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {% set summary = namespace(total_cost=0, total_buy=0, total_sell=0) %}\r\n                        {% for txn in s.transactions %}\r\n                        <tr>\r\n                            <td>{{ txn.transaction_date }}</td>\r\n                            <td>{{ txn.transaction_type }}</td>\r\n                            <td>{{ txn.shares }}</td>\r\n                            <td>${{ txn.price }}</td>\r\n                            <td>${{ txn.transaction_cost }}</td>\r\n                        </tr>\r\n\r\n                        {% if txn.transaction_type.lower() == 'buy' %}\r\n                            {% set summary.total_cost = summary.total_cost + ((txn.shares | float) * (txn.price | float)) + (txn.transaction_cost | float) %}\r\n                            {% set summary.total_buy = summary.total_buy + (txn.shares | float) %}\r\n                        {% elif txn.transaction_type.lower() == 'sell' %}\r\n                            {% set summary.total_sell = summary.total_sell + (txn.shares | float) %}\r\n                        {% endif %}\r\n                        {% endfor %}\r\n                    </tbody>\r\n                    <tfoot class=\"table-secondary\">\r\n                        <tr>\r\n                            <td colspan=\"5\">\r\n                                <strong>Summary:</strong>\r\n                                Bought: {{ summary.total_buy }} shares,\r\n                                Sold: {{ summary.total_sell }} shares,\r\n                                Avg Cost/Share:\r\n                                {% if summary.total_buy > 0 %}${{ (summary.total_cost / summary.total_buy) | round(2) }}{% else %}-{% endif %},\r\n                                Total Cost: ${{ summary.total_cost | round(2) }}\r\n\r\n                            </td>\r\n                        </tr>\r\n                    </tfoot>\r\n                </table>\r\n            </td>\r\n        </tr>\r\n        {% endif %}\r\n        {% endfor %}\r\n    </tbody>\r\n</table>\r\n\r\n    <style>\r\n    .toggle-transactions {\r\n        display: inline-block;\r\n        width: 20px;\r\n        height: 20px;\r\n        text-align: center;\r\n        line-height: 20px;\r\n    }\r\n\r\n    .transaction-details {\r\n        background-color: #f8f9fa;\r\n    }\r\n\r\n    /* Add a subtle animation to the arrow */\r\n    .toggle-icon {\r\n        display: inline-block;\r\n        transition: transform 0.3s ease;\r\n    }\r\n\r\n    /* Remove bottom border of the row above the expanded transactions */\r\n    tr:has(+ tr.transaction-details:not([style*=\"display: none\"])) {\r\n        border-bottom: none;\r\n    }\r\n    </style>\r\n\r\n    <script>\r\n    document.addEventListener('DOMContentLoaded', function() {\r\n        const toggleElements = document.querySelectorAll('.toggle-transactions');\r\n\r\n        toggleElements.forEach(function(element) {\r\n            element.addEventListener('click', function() {\r\n                const targetId = this.getAttribute('data-target');\r\n                const targetRow = document.getElementById(targetId);\r\n                const icon = this.querySelector('.toggle-icon');\r\n\r\n                if (targetRow.style.display === 'none') {\r\n                    targetRow.style.display = 'table-row';\r\n                    icon.innerHTML = '&#x25B2;';\r\n                    icon.style.transform = 'rotate(0deg)';\r\n                } else {\r\n                    targetRow.style.display = 'none';\r\n                    icon.innerHTML = '&#9660;';\r\n                    icon.style.transform = 'rotate(0deg)';\r\n                }\r\n            });\r\n        });\r\n    });\r\n    </script>\r\n\r\n{% else %}\r\n    <div class=\"alert alert-info\">This portfolio has no stocks yet. Use the button above to add one.</div>\r\n{% endif %}\r\n<hr class=\"my-4\">\r\n<h4>\uD83D\uDCCA Portfolio Summary</h4>\r\n<p><strong>Total Market Value:</strong> ${{ portfolio_summary.market_value }}</p>\r\n<p><strong>Total Invested Capital:</strong> ${{ portfolio_summary.total_cost }}</p>\r\n<p><strong>Unrealised P&amp;L:</strong> ${{ portfolio_summary.pnl }}</p>\r\n{% endblock %}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/templates/portfolio_detail.html b/templates/portfolio_detail.html
--- a/templates/portfolio_detail.html	(revision 1690122b1caa80b3be2200bc35fd21a87a68c58f)
+++ b/templates/portfolio_detail.html	(date 1743496482504)
@@ -2,19 +2,69 @@
 
 {% block title %}{{ portfolio.name }} - Portfolio Details{% endblock %}
 
+{% block head %}
+{{ super() }}
+<!-- LISA Add Chart.js -->
+<script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
+{% endblock %}
 
 {% block content %}
 
 <h2 class="mb-3">📈 {{ portfolio.name }}</h2>
 <p class="text-muted">Portfolio ID: {{ portfolio.portfolio_id }}</p>
 
-<a href="{{ url_for('add_symbol', portfolio_id=portfolio.portfolio_id) }}" class="btn btn-success mb-4">➕ Add Symbol</a>
-<a href="{{ url_for('export_portfolio_excel', portfolio_id=portfolio.portfolio_id) }}" class="btn btn-outline-secondary mb-4 ms-2">
-  📥 Export to Excel
-</a>
-<a href="{{ url_for('sector_exposure', portfolio_id=portfolio.portfolio_id) }}" class="btn btn-info mb-4 ms-2">
-  🧭 View Sector Exposure
-</a>
+<div class="mb-4">
+  <a href="{{ url_for('add_symbol', portfolio_id=portfolio.portfolio_id) }}" class="btn btn-success">➕ Add Symbol</a>
+  <a href="{{ url_for('export_portfolio_excel', portfolio_id=portfolio.portfolio_id) }}" class="btn btn-outline-secondary ms-2">
+    📥 Export to Excel
+  </a>
+  <a href="{{ url_for('sector_exposure', portfolio_id=portfolio.portfolio_id) }}" class="btn btn-info ms-2">
+    🧭 View Sector Exposure
+  </a>
+</div>
+
+<!-- LISA Portfolio Performance Chart Card -->
+<div class="card shadow-sm mb-4">
+    <div class="card-header d-flex justify-content-between align-items-center">
+        <h5 class="mb-0">Portfolio Performance</h5>
+        <div class="btn-group" role="group" aria-label="Time period selector">
+            <button type="button" class="btn btn-outline-primary period-btn" data-period="1d">1D</button>
+            <button type="button" class="btn btn-outline-primary period-btn" data-period="1w">1W</button>
+            <button type="button" class="btn btn-outline-primary period-btn active" data-period="1m">1M</button>
+            <button type="button" class="btn btn-outline-primary period-btn" data-period="ytd">YTD</button>
+            <button type="button" class="btn btn-outline-primary period-btn" data-period="1y">1Y</button>
+            <button type="button" class="btn btn-outline-primary period-btn" data-period="max">Max</button>
+        </div>
+        <div class="form-check form-switch">
+            <input class="form-check-input" type="checkbox" id="view-mode-switch">
+            <label class="form-check-label" for="view-mode-switch">Show %</label>
+        </div>
+    </div>
+    <div class="card-body">
+        <div id="chart-loading" class="text-center py-5">
+            <div class="spinner-border text-primary" role="status">
+                <span class="visually-hidden">Loading...</span>
+            </div>
+            <p class="mt-3">Loading portfolio data...</p>
+        </div>
+        <div id="portfolio-chart" style="height: 400px; display: none;"></div>
+        <div id="chart-empty" class="text-center py-5" style="display: none;">
+            <p class="text-muted">No performance data available for this time period.</p>
+        </div>
+    </div>
+    <div class="card-footer d-flex justify-content-between">
+        <div id="performance-start">
+            <small class="text-muted">Start: <span id="start-value">--</span></small>
+        </div>
+        <div id="performance-current" class="text-center">
+            <strong id="change-value">--</strong>
+            <span id="change-percentage" class="ms-2 badge bg-success">--</span>
+        </div>
+        <div id="performance-end" class="text-end">
+            <small class="text-muted">Current: <span id="end-value">--</span></small>
+        </div>
+    </div>
+</div>
 
 {% if symbols %}
 <table class="table table-striped">
@@ -158,4 +208,193 @@
 <p><strong>Total Market Value:</strong> ${{ portfolio_summary.market_value }}</p>
 <p><strong>Total Invested Capital:</strong> ${{ portfolio_summary.total_cost }}</p>
 <p><strong>Unrealised P&amp;L:</strong> ${{ portfolio_summary.pnl }}</p>
-{% endblock %}
+
+<!-- LISA Chart.js Script -->
+<script>
+document.addEventListener('DOMContentLoaded', function() {
+    let portfolioChart = null;
+    let currentPeriod = '1m';
+    let showPercentage = false;
+    let chartData = null;
+
+    // Initialize buttons
+    document.querySelectorAll('.period-btn').forEach(btn => {
+        btn.addEventListener('click', function() {
+            // Remove active class from all buttons
+            document.querySelectorAll('.period-btn').forEach(b => b.classList.remove('active'));
+            // Add active class to clicked button
+            this.classList.add('active');
+
+            // Update period and reload chart
+            currentPeriod = this.getAttribute('data-period');
+            loadChartData();
+        });
+    });
+
+    // Handle view mode switch
+    const viewModeSwitch = document.getElementById('view-mode-switch');
+    viewModeSwitch.addEventListener('change', function() {
+        showPercentage = this.checked;
+        updateChart();
+    });
+
+    // Function to load data from API
+    function loadChartData() {
+        // Show loading spinner
+        document.getElementById('chart-loading').style.display = 'block';
+        document.getElementById('portfolio-chart').style.display = 'none';
+        document.getElementById('chart-empty').style.display = 'none';
+
+        // Fetch data from API
+        fetch(`/api/portfolio/{{ portfolio.portfolio_id }}/performance-data?period=${currentPeriod}`)
+            .then(response => {
+                if (!response.ok) {
+                    throw new Error('Network response was not ok');
+                }
+                return response.json();
+            })
+            .then(data => {
+                chartData = data;
+                updateChart();
+            })
+            .catch(error => {
+                console.error('Error loading chart data:', error);
+                document.getElementById('chart-loading').style.display = 'none';
+                document.getElementById('chart-empty').style.display = 'block';
+            });
+    }
+
+// Function to update the chart with current data
+function updateChart() {
+    // Hide loading spinner
+    document.getElementById('chart-loading').style.display = 'none';
+
+    if (!chartData || !chartData.dates || chartData.dates.length === 0 ||
+        !chartData.values || chartData.values.length === 0) {
+        document.getElementById('chart-empty').style.display = 'block';
+        document.getElementById('portfolio-chart').style.display = 'none';
+        console.log("No chart data available:", chartData);
+        return;
+    }
+
+    // Get values based on view mode
+    const values = showPercentage ? chartData.percentage_values : chartData.values;
+
+    // Additional validation
+    if (!values || values.length === 0 || values.every(v => v === 0)) {
+        document.getElementById('chart-empty').style.display = 'block';
+        document.getElementById('portfolio-chart').style.display = 'none';
+        console.log("Values array is empty or all zeros");
+        return;
+    }
+
+    // Show chart container
+    document.getElementById('portfolio-chart').style.display = 'block';
+    document.getElementById('chart-empty').style.display = 'none';
+
+        // Determine chart color based on performance
+        const startValue = values[0];
+        const endValue = values[values.length - 1];
+        const isPositive = endValue >= startValue;
+        const chartColor = isPositive ? 'rgba(75, 192, 192, 1)' : 'rgba(255, 99, 132, 1)';
+        const chartBgColor = isPositive ? 'rgba(75, 192, 192, 0.2)' : 'rgba(255, 99, 132, 0.2)';
+
+        // Format currency for display
+        const formatCurrency = (value) => {
+            return '$' + value.toLocaleString(undefined, {
+                minimumFractionDigits: 2,
+                maximumFractionDigits: 2
+            });
+        };
+
+        // Update summary values
+        const absoluteStart = chartData.values[0];
+        const absoluteEnd = chartData.values[chartData.values.length - 1];
+        const absoluteChange = absoluteEnd - absoluteStart;
+        const percentChange = (absoluteChange / absoluteStart) * 100;
+
+        document.getElementById('start-value').textContent = formatCurrency(absoluteStart);
+        document.getElementById('end-value').textContent = formatCurrency(absoluteEnd);
+        document.getElementById('change-value').textContent = formatCurrency(absoluteChange);
+
+        const percentageBadge = document.getElementById('change-percentage');
+        percentageBadge.textContent = percentChange.toFixed(2) + '%';
+        percentageBadge.className = 'ms-2 badge ' + (isPositive ? 'bg-success' : 'bg-danger');
+
+        // Create or update chart
+        if (portfolioChart) {
+            portfolioChart.data.labels = chartData.dates;
+            portfolioChart.data.datasets[0].data = values;
+            portfolioChart.data.datasets[0].borderColor = chartColor;
+            portfolioChart.data.datasets[0].backgroundColor = chartBgColor;
+            portfolioChart.options.scales.y.title.text = showPercentage ? 'Change (%)' : 'Value ($)';
+            portfolioChart.update();
+        } else {
+            const ctx = document.getElementById('portfolio-chart').getContext('2d');
+            portfolioChart = new Chart(ctx, {
+                type: 'line',
+                data: {
+                    labels: chartData.dates,
+                    datasets: [{
+                        label: showPercentage ? 'Portfolio Performance (%)' : 'Portfolio Value ($)',
+                        data: values,
+                        borderColor: chartColor,
+                        backgroundColor: chartBgColor,
+                        borderWidth: 2,
+                        fill: true,
+                        tension: 0.1,
+                        pointRadius: 1,
+                        pointHoverRadius: 5
+                    }]
+                },
+                options: {
+                    responsive: true,
+                    maintainAspectRatio: false,
+                    plugins: {
+                        legend: {
+                            display: false
+                        },
+                        tooltip: {
+                            callbacks: {
+                                label: function(context) {
+                                    if (showPercentage) {
+                                        return `Change: ${context.raw.toFixed(2)}%`;
+                                    } else {
+                                        return `Value: ${formatCurrency(context.raw)}`;
+                                    }
+                                }
+                            }
+                        }
+                    },
+                    scales: {
+                        x: {
+                            grid: {
+                                display: false
+                            }
+                        },
+                        y: {
+                            title: {
+                                display: true,
+                                text: showPercentage ? 'Change (%)' : 'Value ($)'
+                            },
+                            ticks: {
+                                callback: function(value) {
+                                    if (showPercentage) {
+                                        return value.toFixed(2) + '%';
+                                    } else {
+                                        return '$' + value.toLocaleString();
+                                    }
+                                }
+                            }
+                        }
+                    }
+                }
+            });
+        }
+    }
+
+    // Initial load
+    loadChartData();
+});
+</script>
+{% endblock %}
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"e1a8e9de-b7af-4b2f-b553-27f796069872\" name=\"Changes\" comment=\"Added sector exposure and export into pdf\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/app.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/app.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/portfolio_manager.db\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/portfolio_manager.db\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/templates/portfolio_detail.html\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/templates/portfolio_detail.html\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Flask Main\" />\r\n        <option value=\"Python Script\" />\r\n        <option value=\"HTML File\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"FlaskConsoleOptions\" custom-start-script=\"import sys; print('Python %s on %s' % (sys.version, sys.platform)); sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo, NoAppException&#10;for module in [&quot;main.py&quot;, &quot;wsgi.py&quot;, &quot;app.py&quot;]:&#10;    try: locals().update(ScriptInfo(app_import_path=module, create_app=None).load_app().make_shell_context()); print(&quot;\\nFlask App: %s&quot; % app.import_name); break&#10;    except NoAppException: pass\">\r\n    <envs>\r\n      <env key=\"FLASK_APP\" value=\"app\" />\r\n    </envs>\r\n    <option name=\"myCustomStartScript\" value=\"import sys; print('Python %s on %s' % (sys.version, sys.platform)); sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo, NoAppException&#10;for module in [&quot;main.py&quot;, &quot;wsgi.py&quot;, &quot;app.py&quot;]:&#10;    try: locals().update(ScriptInfo(app_import_path=module, create_app=None).load_app().make_shell_context()); print(&quot;\\nFlask App: %s&quot; % app.import_name); break&#10;    except NoAppException: pass\" />\r\n    <option name=\"myEnvs\">\r\n      <map>\r\n        <entry key=\"FLASK_APP\" value=\"app\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;anthonykhj&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\"><![CDATA[{\r\n  \"selectedUrlAndAccountId\": {\r\n    \"url\": \"https://github.com/lisalim14/investibuddy_web\",\r\n    \"accountId\": \"886b3fa5-21ae-41e0-922b-e4d773e9b0ba\"\r\n  }\r\n}]]></component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 0\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2und7xYRz6h43MEmsveUrhRRzK2\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"DefaultHtmlFileTemplate\": \"HTML File\",\r\n    \"Flask server.Flask (app.py).executor\": \"Run\",\r\n    \"Flask server.investibuddy_web.executor\": \"Run\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"RunOnceActivity.git.unshallow\": \"true\",\r\n    \"git-widget-placeholder\": \"lisa\",\r\n    \"ignore.virus.scanning.warn.message\": \"true\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"settings.editor.selected.configurable\": \"com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"investibuddy_web\" type=\"Python.FlaskServer\">\r\n      <option name=\"flaskDebug\" value=\"true\" />\r\n      <module name=\"investibuddy_web\" />\r\n      <option name=\"target\" value=\"$PROJECT_DIR$/app.py\" />\r\n      <option name=\"targetType\" value=\"PATH\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"launchJavascriptDebuger\" value=\"false\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-deb605915726-JavaScript-PY-243.22562.220\" />\r\n        <option value=\"bundled-python-sdk-0fc6c617c4bd-9a18a617cbe4-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-243.22562.220\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"e1a8e9de-b7af-4b2f-b553-27f796069872\" name=\"Changes\" comment=\"\" />\r\n      <created>1742888108861</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1742888108861</updated>\r\n      <workItem from=\"1742888109912\" duration=\"11168000\" />\r\n      <workItem from=\"1743258247719\" duration=\"6912000\" />\r\n      <workItem from=\"1743298628157\" duration=\"3409000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"added an arrow to show/hide transactions under each ticker.\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1743263747780</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1743263747780</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Added sector exposure and export into pdf\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1743299893761</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1743299893762</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"added an arrow to show/hide transactions under each ticker.\" />\r\n    <MESSAGE value=\"Added sector exposure and export into pdf\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Added sector exposure and export into pdf\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/investibuddy_web$investibuddy_web.coverage\" NAME=\"investibuddy_web Coverage Results\" MODIFIED=\"1743301901801\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n    <SUITE FILE_PATH=\"coverage/investibuddy_web$Flask__app_py_.coverage\" NAME=\"Flask (app.py) Coverage Results\" MODIFIED=\"1743299552042\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 1690122b1caa80b3be2200bc35fd21a87a68c58f)
+++ b/.idea/workspace.xml	(date 1743498189161)
@@ -4,10 +4,9 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="e1a8e9de-b7af-4b2f-b553-27f796069872" name="Changes" comment="Added sector exposure and export into pdf">
+    <list default="true" id="e1a8e9de-b7af-4b2f-b553-27f796069872" name="Changes" comment="Cannot sell more stocks than you current have, Cannot have a future transaction date">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/app.py" beforeDir="false" afterPath="$PROJECT_DIR$/app.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/portfolio_manager.db" beforeDir="false" afterPath="$PROJECT_DIR$/portfolio_manager.db" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/templates/portfolio_detail.html" beforeDir="false" afterPath="$PROJECT_DIR$/templates/portfolio_detail.html" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -49,12 +48,12 @@
     &quot;assignee&quot;: &quot;anthonykhj&quot;
   }
 }</component>
-  <component name="GithubPullRequestsUISettings"><![CDATA[{
-  "selectedUrlAndAccountId": {
-    "url": "https://github.com/lisalim14/investibuddy_web",
-    "accountId": "886b3fa5-21ae-41e0-922b-e4d773e9b0ba"
-  }
-}]]></component>
+  <component name="GithubPullRequestsUISettings">{
+  &quot;selectedUrlAndAccountId&quot;: {
+    &quot;url&quot;: &quot;https://github.com/lisalim14/investibuddy_web&quot;,
+    &quot;accountId&quot;: &quot;886b3fa5-21ae-41e0-922b-e4d773e9b0ba&quot;
+  }
+}</component>
   <component name="ProjectColorInfo">{
   &quot;associatedIndex&quot;: 0
 }</component>
@@ -66,24 +65,24 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "DefaultHtmlFileTemplate": "HTML File",
-    "Flask server.Flask (app.py).executor": "Run",
-    "Flask server.investibuddy_web.executor": "Run",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "RunOnceActivity.git.unshallow": "true",
-    "git-widget-placeholder": "lisa",
-    "ignore.virus.scanning.warn.message": "true",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "nodejs_package_manager_path": "npm",
-    "settings.editor.selected.configurable": "com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;DefaultHtmlFileTemplate&quot;: &quot;HTML File&quot;,
+    &quot;Flask server.Flask (app.py).executor&quot;: &quot;Run&quot;,
+    &quot;Flask server.investibuddy_web.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;lisa&quot;,
+    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
-}]]></component>
+}</component>
   <component name="RunManager">
     <configuration name="investibuddy_web" type="Python.FlaskServer">
       <option name="flaskDebug" value="true" />
@@ -121,7 +120,8 @@
       <updated>1742888108861</updated>
       <workItem from="1742888109912" duration="11168000" />
       <workItem from="1743258247719" duration="6912000" />
-      <workItem from="1743298628157" duration="3409000" />
+      <workItem from="1743298628157" duration="3850000" />
+      <workItem from="1743495562457" duration="2167000" />
     </task>
     <task id="LOCAL-00001" summary="added an arrow to show/hide transactions under each ticker.">
       <option name="closed" value="true" />
@@ -139,7 +139,15 @@
       <option name="project" value="LOCAL" />
       <updated>1743299893762</updated>
     </task>
-    <option name="localTasksCounter" value="3" />
+    <task id="LOCAL-00003" summary="Cannot sell more stocks than you current have, Cannot have a future transaction date">
+      <option name="closed" value="true" />
+      <created>1743302102708</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1743302102708</updated>
+    </task>
+    <option name="localTasksCounter" value="4" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -148,10 +156,11 @@
   <component name="VcsManagerConfiguration">
     <MESSAGE value="added an arrow to show/hide transactions under each ticker." />
     <MESSAGE value="Added sector exposure and export into pdf" />
-    <option name="LAST_COMMIT_MESSAGE" value="Added sector exposure and export into pdf" />
+    <MESSAGE value="Cannot sell more stocks than you current have, Cannot have a future transaction date" />
+    <option name="LAST_COMMIT_MESSAGE" value="Cannot sell more stocks than you current have, Cannot have a future transaction date" />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
-    <SUITE FILE_PATH="coverage/investibuddy_web$investibuddy_web.coverage" NAME="investibuddy_web Coverage Results" MODIFIED="1743301901801" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="" />
+    <SUITE FILE_PATH="coverage/investibuddy_web$investibuddy_web.coverage" NAME="investibuddy_web Coverage Results" MODIFIED="1743497780771" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="" />
     <SUITE FILE_PATH="coverage/investibuddy_web$Flask__app_py_.coverage" NAME="Flask (app.py) Coverage Results" MODIFIED="1743299552042" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="" />
   </component>
 </project>
\ No newline at end of file
